omg: 1
lifecycle:
  startup:
    command: ["google-sheets"]
health:
  http:
    path: /health
    port: 3000
info:
  version: 1.0.0
  title: Google Spreadsheet.
  description: This is a google-sheets service.
  contact:
    name: Rohit Shetty
    url: https://github.com/ht68rohit
    email: rohits@heaptrace.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
actions:
  createSpreadsheet:
    help: Create new google spreadsheet.
    http:
      port: 3000
      method: post
      path: /createSpreadsheet
      contentType: application/json
    arguments:
      title: 
        type: string
        in: requestBody
        required: true
        help: Title for new spreadsheet.
      emailAddress: 
        type: string
        in: requestBody
        required: true
        help: The gmail email address of the user or group to which this drive permission refers (used to view sheet from email address drive account).
      role:
        type: string
        in: requestBody
        required: true
        help: The role granted by this permission, the roles currently allowed - writer ( recommended ), organizer , fileOrganizer, commenter , reader.
      type: 
        type: string
        in: requestBody
        required: true
        help: The type of the grantee. the types currently allowed - user ( recommended ), group, domain, anyone.
    output:   
      type: map
      contentType: application/json
  findSpreadsheet:
    help: Get spreadsheet by ID.
    http:
      port: 3000
      method: post
      path: /findSpreadsheet
      contentType: application/json
    arguments:
      spreadsheetId: 
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
    output:   
      type: map
      contentType: application/json
      # properties:
      #   spreadsheetId:
      #     help: Google spreadsheet ID.
      #     type: string
      #   properties:
      #     help: Spreadsheet properties.
      #     type: object
      #   sheets:
      #     help: List of all sheet properties, tabColor and data.
      #     type: list
  addSheet:
    help: Add new sheet in spreadsheet.
    http:
      port: 3000
      method: post
      path: /addSheet
      contentType: application/json
    arguments:
      spreadsheetId:
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
      sheetTitle:
        type: string
        in: requestBody
        required: true
        help: The title for new sheet.
    output:
      type: map
      contentType: application/json
  findSheet:
    help: Get sheet by ID, Index or Title.
    http:
      port: 3000
      method: post
      path: /findSheet
      contentType: application/json
    arguments:
      spreadsheetId:
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
      sheetTitle:
        type: string
        in: requestBody
        required: true
        help: The title of sheet.
    output:
      type: map
      contentType: application/json
      # properties:
      #   success:
      #     help: Returns success status.
      #     type: boolean
      #   message:
      #     help: Success message or error if any occurred.
      #     type: string
      #   statusCode:
      #     help: HTTP status code.
      #     type: int
  updateSheetSize:
    help: Update sheets row and column.
    http:
      port: 3000
      method: post
      path: /updateSheetSize
      contentType: application/json
    arguments:
      spreadsheetId:
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
      sheetTitle: 
        type: string
        in: requestBody
        required: true
        help: The title of sheet.
      row: 
        type: int
        in: requestBody
        required: true
        help: Update rows in sheet.
      column: 
        type: int
        in: requestBody
        required: true
        help: Update columns in sheet.
    output:
      type: map
      contentType: application/json
  updateCell:
    help: Update sheet content.
    http:
      port: 3000
      method: post
      path: /updateCell
      contentType: application/json
    arguments:
      spreadsheetId:
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
      sheetTitle: 
        type: string
        in: requestBody
        required: true
        help: The title of sheet.
      cellNumber:
        type: string
        in: requestBody
        required: true
        help: Update rows in sheet.
      content: 
        type: string
        in: requestBody
        required: true
        help: The content to update on cell of sheet.
    output:
      type: map
      contentType: application/json
  deleteSheet:
    help: Delete sheet.
    http:
      port: 3000
      method: post
      path: /deleteSheet
      contentType: application/json
    arguments:
      spreadsheetId:
        type: string
        in: requestBody
        required: true
        help: The ID of spreadsheet.
      sheetId:
        type: int
        in: requestBody
        required: true
        help: The ID of sheet to delete (To delete first sheet ID will be 0).
    output:
      type: map
      contentType: application/json
  listener:
    help: Start receiving newly added card details from board list.
    events:
      newRowUpdate:
        help: Triggered anytime when any new card is added in list.
        http: 
          port: 3000
          subscribe:
            method: post
            path: /subscribe
          unsubscribe:
            method: post
            path: /unsubscribe
        arguments:
          spreadsheetID:
            type: string
            in: requestBody
            required: true
            help: The board ID to subscribe.
          sheetTitle:
            type: string
            in: requestBody
            required: true
            help: The list ID to subscribe the list.
        output:
          contentType: application/json
          type: map
environment:
  KEY:
    type: string
    required: true
    help: Base64 data of credential's key file.
    
